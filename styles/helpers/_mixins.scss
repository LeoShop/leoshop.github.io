@mixin min($width) {
  @media only screen and (min-width: $width) {
    @content;
  }
}

@mixin max($width) {
  @media only screen and (max-width: $width) {
    @content;
  }
}

@mixin media-scope($width-min, $width-max) {
  @media only screen and (min-width: #{$width-min}px) and (max-width: #{$width-max}px) {
    @content;
  }
}

@mixin aspect-ratio($width, $height) {
  position: relative;

  &:before {
    content: "";
    display: block;
    padding-bottom: floor($height / $width * 10000) / 10000 * 100%;
  }

  > * {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
  }
}

@mixin locked-prop($prop, $value-map, $is-media-extended: false) {
  $width-min: nth(map-keys($value-map), 1);
  $width-max: nth(map-keys($value-map), 2);
  $value-max: map-get($value-map, $width-max);
  $value-min: map-get($value-map, $width-min);
  $values-diff: $value-max - $value-min;
  $widths-diff: $width-max - $width-min;
  $m: $values-diff / $widths-diff;
  $b: $value-max - $m * $width-max;
  $y: $m + $b;

  @include media-scope($width-min, $width-max) {
    #{$prop}: calc(#{$m*100}vw + #{$b}px);
  }
  @if $is-media-extended {
    @include min(#{$width-max}px) {
      #{$prop}: #{$value-max}px;
    }
    @include max(#{$width-min}px) {
      #{$prop}: #{$value-min}px;
    }
  }
}
